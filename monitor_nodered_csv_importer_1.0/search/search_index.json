{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Maximo Monitor Node-RED CSV Importer Lab You will learn about how to import historical data into Maximo Monitor (on MAS) using CSV files and a locally installed instance of Node-RED. It is based on an existing reusable Node-RED script that needs to be imported to a non-cloud based instance of Node-RED as it requires access to a file system where the CSV files are located. In this lab I will show you the steps needed to successfully import the historical data. The steps will cover: Setting up your environment Get and adjust the Node-RED script Using the script to create the device type in Monitor Inject the CSV data directly into the database Have fun Note Expected time needed to run the complete lab: 1 hour and 30 minutes Updated: 2022-02-22","title":"Welcome"},{"location":"#welcome-to-the-maximo-monitor-node-red-csv-importer-lab","text":"You will learn about how to import historical data into Maximo Monitor (on MAS) using CSV files and a locally installed instance of Node-RED. It is based on an existing reusable Node-RED script that needs to be imported to a non-cloud based instance of Node-RED as it requires access to a file system where the CSV files are located. In this lab I will show you the steps needed to successfully import the historical data. The steps will cover: Setting up your environment Get and adjust the Node-RED script Using the script to create the device type in Monitor Inject the CSV data directly into the database Have fun Note Expected time needed to run the complete lab: 1 hour and 30 minutes Updated: 2022-02-22","title":"Welcome to the Maximo Monitor Node-RED CSV Importer Lab"},{"location":"adjust_script/","text":"Objectives In this Exercise you will learn how to: Create the Monitor Device type using Monitor API Inject and verify 1 row of data Inject historical data from CSV file(s) Before you begin: This Exercise requires that you: Have completed the pre-requisites required for all labs AND Exercise 3 Have completed the setup of Node-RED locally Have imported the Node-RED script Attention You need the credentials described in the Exercise 3 section in Pre-Requites before proceeding with this exercise. The Node-RED script includes 5 steps which are shown with comment nodes in the script: Create generic flow data in the \"Set Flow Data\" function node Create Asset Table in DB2 using the Monitor API Inject 1 row of data into the table to verify it works Update the \"Fomat SQL\" function node in step 5 to reflect step 3 Upload CSV data to SQL database using the UI uploader Tip You can also find the description of the 5 steps within the flow in textual form. Simply double-click to open the INFORMATION node: Create the Monitor Device type This section describes how to use the Monitor API to create the demo pump device in Monitor without using the IoT Tool. Open Node-RED in your browser if not done already. Find and open the \"Set Flow Data\" node in Step 1. Enter the Monitor API URL monitorAPIURL , the API Key x_api_key and API Token x_api_token as defined in the Pre-Requites . Replace XX with your initials in line 5 and 7. Press Done . The metricTimestampColumn in the \"Set Flow Data\" function node tells Monitor which column should be used as timestamp, which is important when injecting historical data. The metrics are already adjusted to contain the same columns as in Pump CSV data files that you will use later in the lab. Deploy the script and if you enterred the correct credentials you should see the below message at Node-RED Dashboard (unless the DEMO_PUMP table has already been created). Step 2 is really easy, as it only requires you to click on the inject node called \"Create Table\". Navigate to the Dashboard once the requesting status of the http request node is gone. Attention The order and names of the metrics MUST be the same as in the CSV file!! Inject and verify 1 row of data Note You can use the Maximo Monitor application to verify that the Device type has been created. However I will be using DBeaver Community Edition during this lab. Now you should be able to see the DEMO_PUMP tables have been created: Find and open the \"MAS (8.6)\" dashDB In node in Step 3. Click on the pencil to edit the Server data. Enter the credentials to the DB2 Warehouse server and press Update and then Done . Find and open the \"Format SQL\" function node. Scroll down and you will see two sections where you can enter data. The first \"line\" section is populated with some simulated data which is in the same order as the CSV file data you will be using soon. The second section is where the SQL statement is being created which will be used to inject that data into the DB2 Warehouse. You can leave these sections untouched for now, as this excercise will use the provided CSV files that matches that data set - Click on Done or Cancel to close the function node. Deploy the script and click on the Inject 1 row inject node. My first try failed due to wrong password as you can see in the debug pane. The second attempt was successful as shown in the red box. You can also see the actual complete SQL statement that was send to the database. This might help you when you want to experiment with your own data set after you have completed this lab. And you can also verify that the data was injected into the database using DBeaver. Inject historical data from CSV file(s) Now is the time you have been waiting for ;-) You will be using the two csv files which was downloaded together with the Node-RED script (in your Downloads folder). Please remember that location. The first three steps of the total of five is done and you will now execute the last two steps. Tip The uploadSql and the chunks-to-lines nodes makes it possible to handle rather large data sets as they make sure the data set is handled in smaller chunks to avoid memory issues - but at the same time ingest 2048 rows into the database at the time (it seems to be a good number from a performance and error avoidance perspective). As you can see in the script Step 4 is about copying the second section from Format SQL in Step 3 to Format SQL in Step 5. Open the Format SQL in Step 3, scroll to the end and make a copy of the lines between: // BEGIN: THIS SECTION CAN BE COPIED TO STEP 5 \"Format SQL\" NODE, ONCE IT WORKS. : // END Click Cancel . Open the Format SQL in Step 5, scroll to the end. You can see that the content you copied from Step 3 is already there, but now you know the process when experimenting with your own data sets. Just click Cancel . It is a good idea to delete the test rows that was injected in Step 3 before injecting the CSV data from the files. Scroll down in the workspace and you will see some additional Step 4 nodes to empty the table (but not removing it), click on the Truncate table inject node. It is now time to inject the first small data set of 10 data lines. The file PumpDataSmall.csv will be used for that purpose. Navigate the the Node-RED Dashboard and click on Choose file (or Browse... on Windows). Select PumpDataSmall.csv and press Open . Press the Play button. It took 1 second to inject 10 rows of data. If that is not the case, then verify that the separator is correct. Open the csv node. Verify that the Separator is the same as that being used in the CSV file. semicolon is used in the pump csv files. It is a good idea to disable the two debug nodes before injecting the larger csv file. Click on the green (enabled) button so it become grey (disabled). Now it is time to inject the large CSV file. Click on Choose file and open PumpData.csv . Click on the Play button and you will see the progress as data is being injected. You have now injected 132479 rows of data in total from the two CSV files :-) Attention Please empty the table when it is no longer being used. Congratulations you have successfully adjusted and prepared your script as well as injected the data from the two CSV files. You will now be able to adjust according to your own data sets and inject those data sets into Maximo Monitor - Enjoy!","title":"3. Adjust and run Node-RED script"},{"location":"adjust_script/#objectives","text":"In this Exercise you will learn how to: Create the Monitor Device type using Monitor API Inject and verify 1 row of data Inject historical data from CSV file(s) Before you begin: This Exercise requires that you: Have completed the pre-requisites required for all labs AND Exercise 3 Have completed the setup of Node-RED locally Have imported the Node-RED script Attention You need the credentials described in the Exercise 3 section in Pre-Requites before proceeding with this exercise. The Node-RED script includes 5 steps which are shown with comment nodes in the script: Create generic flow data in the \"Set Flow Data\" function node Create Asset Table in DB2 using the Monitor API Inject 1 row of data into the table to verify it works Update the \"Fomat SQL\" function node in step 5 to reflect step 3 Upload CSV data to SQL database using the UI uploader Tip You can also find the description of the 5 steps within the flow in textual form. Simply double-click to open the INFORMATION node:","title":"Objectives"},{"location":"adjust_script/#create-the-monitor-device-type","text":"This section describes how to use the Monitor API to create the demo pump device in Monitor without using the IoT Tool. Open Node-RED in your browser if not done already. Find and open the \"Set Flow Data\" node in Step 1. Enter the Monitor API URL monitorAPIURL , the API Key x_api_key and API Token x_api_token as defined in the Pre-Requites . Replace XX with your initials in line 5 and 7. Press Done . The metricTimestampColumn in the \"Set Flow Data\" function node tells Monitor which column should be used as timestamp, which is important when injecting historical data. The metrics are already adjusted to contain the same columns as in Pump CSV data files that you will use later in the lab. Deploy the script and if you enterred the correct credentials you should see the below message at Node-RED Dashboard (unless the DEMO_PUMP table has already been created). Step 2 is really easy, as it only requires you to click on the inject node called \"Create Table\". Navigate to the Dashboard once the requesting status of the http request node is gone. Attention The order and names of the metrics MUST be the same as in the CSV file!!","title":"Create the Monitor Device type"},{"location":"adjust_script/#inject-and-verify-1-row-of-data","text":"Note You can use the Maximo Monitor application to verify that the Device type has been created. However I will be using DBeaver Community Edition during this lab. Now you should be able to see the DEMO_PUMP tables have been created: Find and open the \"MAS (8.6)\" dashDB In node in Step 3. Click on the pencil to edit the Server data. Enter the credentials to the DB2 Warehouse server and press Update and then Done . Find and open the \"Format SQL\" function node. Scroll down and you will see two sections where you can enter data. The first \"line\" section is populated with some simulated data which is in the same order as the CSV file data you will be using soon. The second section is where the SQL statement is being created which will be used to inject that data into the DB2 Warehouse. You can leave these sections untouched for now, as this excercise will use the provided CSV files that matches that data set - Click on Done or Cancel to close the function node. Deploy the script and click on the Inject 1 row inject node. My first try failed due to wrong password as you can see in the debug pane. The second attempt was successful as shown in the red box. You can also see the actual complete SQL statement that was send to the database. This might help you when you want to experiment with your own data set after you have completed this lab. And you can also verify that the data was injected into the database using DBeaver.","title":"Inject and verify 1 row of data"},{"location":"adjust_script/#inject-historical-data-from-csv-files","text":"Now is the time you have been waiting for ;-) You will be using the two csv files which was downloaded together with the Node-RED script (in your Downloads folder). Please remember that location. The first three steps of the total of five is done and you will now execute the last two steps. Tip The uploadSql and the chunks-to-lines nodes makes it possible to handle rather large data sets as they make sure the data set is handled in smaller chunks to avoid memory issues - but at the same time ingest 2048 rows into the database at the time (it seems to be a good number from a performance and error avoidance perspective). As you can see in the script Step 4 is about copying the second section from Format SQL in Step 3 to Format SQL in Step 5. Open the Format SQL in Step 3, scroll to the end and make a copy of the lines between: // BEGIN: THIS SECTION CAN BE COPIED TO STEP 5 \"Format SQL\" NODE, ONCE IT WORKS. : // END Click Cancel . Open the Format SQL in Step 5, scroll to the end. You can see that the content you copied from Step 3 is already there, but now you know the process when experimenting with your own data sets. Just click Cancel . It is a good idea to delete the test rows that was injected in Step 3 before injecting the CSV data from the files. Scroll down in the workspace and you will see some additional Step 4 nodes to empty the table (but not removing it), click on the Truncate table inject node. It is now time to inject the first small data set of 10 data lines. The file PumpDataSmall.csv will be used for that purpose. Navigate the the Node-RED Dashboard and click on Choose file (or Browse... on Windows). Select PumpDataSmall.csv and press Open . Press the Play button. It took 1 second to inject 10 rows of data. If that is not the case, then verify that the separator is correct. Open the csv node. Verify that the Separator is the same as that being used in the CSV file. semicolon is used in the pump csv files. It is a good idea to disable the two debug nodes before injecting the larger csv file. Click on the green (enabled) button so it become grey (disabled). Now it is time to inject the large CSV file. Click on Choose file and open PumpData.csv . Click on the Play button and you will see the progress as data is being injected. You have now injected 132479 rows of data in total from the two CSV files :-) Attention Please empty the table when it is no longer being used. Congratulations you have successfully adjusted and prepared your script as well as injected the data from the two CSV files. You will now be able to adjust according to your own data sets and inject those data sets into Maximo Monitor - Enjoy!","title":"Inject historical data from CSV file(s)"},{"location":"get_script/","text":"Objectives In this Exercise you will learn how to: Get the required Node-RED script Import the script into Node-RED Before you begin: This Exercise requires that you have: completed the pre-requisites required for all labs completed the setup of Node-RED locally Get the required Node-RED script Open a browser and navigate to monitor_csv_importer github repository . Click on the green Code button and select Download ZIP . Save it in your Downloads directory. Extract the ZIP file (double-click on Mac) and you will have a directory with the files you need: Tip You can Right-Click on the images in this lab and select Open Image in New Tab to view the details in the screen shots: Import the script into Node-RED Now it is time to import the downloaded Node-RED script. Start the Node-RED instance if not already done (in a CMD/Terminal/iTerm window). Open the browser and navigate to localhost:1880 . Click on the burger menu in upper right hand corner and select Import . Click on select a file to import . Select the Upload CSV to Db2 Pump.json and click Open. Click Import . Click the Deploy button and see this: Don't worry about the error message at this point. This should be solved during the next exercise. Tip If you see red error messages in the Debug pane, you can hover over the node name and then the node which caused the error to occur will appear with dashed orange lines: This should help you identify where the error has occured and what needs to be done is indicated with the error decription. Congratulations you have successfully downloaded and imported the Node-RED script. You will now be able to adjust the Node-RED script to your environment.","title":"2. Get Node-RED script"},{"location":"get_script/#objectives","text":"In this Exercise you will learn how to: Get the required Node-RED script Import the script into Node-RED Before you begin: This Exercise requires that you have: completed the pre-requisites required for all labs completed the setup of Node-RED locally","title":"Objectives"},{"location":"get_script/#get-the-required-node-red-script","text":"Open a browser and navigate to monitor_csv_importer github repository . Click on the green Code button and select Download ZIP . Save it in your Downloads directory. Extract the ZIP file (double-click on Mac) and you will have a directory with the files you need: Tip You can Right-Click on the images in this lab and select Open Image in New Tab to view the details in the screen shots:","title":"Get the required Node-RED script"},{"location":"get_script/#import-the-script-into-node-red","text":"Now it is time to import the downloaded Node-RED script. Start the Node-RED instance if not already done (in a CMD/Terminal/iTerm window). Open the browser and navigate to localhost:1880 . Click on the burger menu in upper right hand corner and select Import . Click on select a file to import . Select the Upload CSV to Db2 Pump.json and click Open. Click Import . Click the Deploy button and see this: Don't worry about the error message at this point. This should be solved during the next exercise. Tip If you see red error messages in the Debug pane, you can hover over the node name and then the node which caused the error to occur will appear with dashed orange lines: This should help you identify where the error has occured and what needs to be done is indicated with the error decription. Congratulations you have successfully downloaded and imported the Node-RED script. You will now be able to adjust the Node-RED script to your environment.","title":"Import the script into Node-RED"},{"location":"prereqs/","text":"Pre-Requisite Instructions Here are the pre-requisites for the Maximo Monitor Node-RED CSV Importer exercises that are designed for MAS Monitor and not the Maximo Asset Monitor SaaS edition. All Exercises All Exercises require that you have: A computer with a Chrome or Firefox browser and internet connectivity. User access to a Maximo Application Suite environment. Your Exercise facilitator should have provided you with the information on your access. An IBM ID. If you don't have an IBM ID you can get one here : o Click Login to MY IBM button o Click Create an IBM ID link Test your access to the Maximo Application Suite environment. Exercise 3 For exercise 3 make sure you have the following in place: At this point you have installed Node-RED and imported the script. You are ready to adjust the script with your credentials, which you should ask the Exercise facilitator or the MAS Administrator to provide. You need the following information: Monitor API credentials: The Monitor API URL, which could look like this https://demo.api.monitor.maximo35.innovationcloud.info/api/ The API Key, which is a very long string of characters The API Token, which is a very long string of characters Monitor DB2 Warehouse credentials: Hostname Database Username Password Port number","title":"Pre-Requisites"},{"location":"prereqs/#pre-requisite-instructions","text":"Here are the pre-requisites for the Maximo Monitor Node-RED CSV Importer exercises that are designed for MAS Monitor and not the Maximo Asset Monitor SaaS edition.","title":"Pre-Requisite Instructions"},{"location":"prereqs/#all-exercises","text":"All Exercises require that you have: A computer with a Chrome or Firefox browser and internet connectivity. User access to a Maximo Application Suite environment. Your Exercise facilitator should have provided you with the information on your access. An IBM ID. If you don't have an IBM ID you can get one here : o Click Login to MY IBM button o Click Create an IBM ID link Test your access to the Maximo Application Suite environment.","title":"All Exercises"},{"location":"prereqs/#exercise-3","text":"For exercise 3 make sure you have the following in place: At this point you have installed Node-RED and imported the script. You are ready to adjust the script with your credentials, which you should ask the Exercise facilitator or the MAS Administrator to provide. You need the following information: Monitor API credentials: The Monitor API URL, which could look like this https://demo.api.monitor.maximo35.innovationcloud.info/api/ The API Key, which is a very long string of characters The API Token, which is a very long string of characters Monitor DB2 Warehouse credentials: Hostname Database Username Password Port number","title":"Exercise 3"},{"location":"release_notes/","text":"Contributors to the Maximo Monitor Node-RED CSV Importer Lab Jan Ekstr\u00f8m - jan.ekstrom@dk.ibm.com Change Information Date By Description 2024-01-02 Jan Ekstr\u00f8m Restructured to work on Github Pages. 2022-02-22 Jan Ekstr\u00f8m Dry runs performed, ready for Release. 2022-02-17 Jan Ekstr\u00f8m Ready for dry run. 2022-02-16 Jan Ekstr\u00f8m First draft version.","title":"Release Notes"},{"location":"release_notes/#contributors-to-themaximo-monitor-node-red-csv-importer-lab","text":"Jan Ekstr\u00f8m - jan.ekstrom@dk.ibm.com","title":"Contributors to theMaximo Monitor Node-RED CSV Importer Lab"},{"location":"release_notes/#change-information","text":"Date By Description 2024-01-02 Jan Ekstr\u00f8m Restructured to work on Github Pages. 2022-02-22 Jan Ekstr\u00f8m Dry runs performed, ready for Release. 2022-02-17 Jan Ekstr\u00f8m Ready for dry run. 2022-02-16 Jan Ekstr\u00f8m First draft version.","title":"Change Information"},{"location":"setup/","text":"Objectives In this Exercise you will learn how to: Install Node-RED locally Add required additional nodes Before you begin: This Exercise requires that you have: completed the pre-requisites required for all labs Install Node-RED locally This is a fairly easy step, as you just have to follow this guide: Running Node-RED locally Once installed and started open the browser and start the Node-RED editor. This lab is verified on the following configurations Operating System Node.js npm Node-RED MacOS Monterey 14.18.3 6.14.15 2.2.0 Windows 10 16.14.0 8.3.1 2.2.2 Attention Make sure you are running Node-RED v2+, i.e. if you already have an existing v1 Node-RED instance installed locally then make sure to upgrade it before proceeding. Add required additional nodes Before loading the Node-RED script you need to add the required additional node libraries. Node-RED library dependencies: - node-red-dashboard - node-red-contrib-ui-upload - node-red-contrib-chunks-to-lines - node-red-nodes-cf-sqldb-dashdb Click on the burger menu in upper right hand corner and select Manage palette . Click on Install and write node-red-dashboard in the Search field - then click on Install . Click on Install again. Wait until you see the new nodes have been installed. Repeat step 2-4 for the other 3 libraries. Congratulations you have successfully installed and prepared a local instance of Node-RED. You will now be able to get and load the Node-RED script.","title":"1. Setup environment"},{"location":"setup/#objectives","text":"In this Exercise you will learn how to: Install Node-RED locally Add required additional nodes Before you begin: This Exercise requires that you have: completed the pre-requisites required for all labs","title":"Objectives"},{"location":"setup/#install-node-red-locally","text":"This is a fairly easy step, as you just have to follow this guide: Running Node-RED locally Once installed and started open the browser and start the Node-RED editor. This lab is verified on the following configurations Operating System Node.js npm Node-RED MacOS Monterey 14.18.3 6.14.15 2.2.0 Windows 10 16.14.0 8.3.1 2.2.2 Attention Make sure you are running Node-RED v2+, i.e. if you already have an existing v1 Node-RED instance installed locally then make sure to upgrade it before proceeding.","title":"Install Node-RED locally"},{"location":"setup/#add-required-additional-nodes","text":"Before loading the Node-RED script you need to add the required additional node libraries. Node-RED library dependencies: - node-red-dashboard - node-red-contrib-ui-upload - node-red-contrib-chunks-to-lines - node-red-nodes-cf-sqldb-dashdb Click on the burger menu in upper right hand corner and select Manage palette . Click on Install and write node-red-dashboard in the Search field - then click on Install . Click on Install again. Wait until you see the new nodes have been installed. Repeat step 2-4 for the other 3 libraries. Congratulations you have successfully installed and prepared a local instance of Node-RED. You will now be able to get and load the Node-RED script.","title":"Add required additional nodes"}]}