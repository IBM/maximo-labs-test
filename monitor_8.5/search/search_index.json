{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the IBM Maximo Monitor Lab (Version: 8.5) You will learn about Monitor's functions capabilities to: Setup local development environment Add built-in Packaging Hopper assets Create a Constant Create a Python Expression Create a Python Function Add a Value card to an Asset Dashboard Create a Custom Function Maximo Asset Monitor connects devices, ingests device data, and transforms that data into meaningful insights through visualizations such as time series line and bar charts, tabular reports, and interactive diagrams. Watson IoT Platform and its additional add-on services enable organizations to capture and explore data for devices, equipment and machines, and discover insights that can drive better decision-making. Watch the Maximo Application Suite Demonstration Updated: 2021-10-02","title":"Welcome to the Monitor Lab"},{"location":"#welcome-to-the-ibm-maximo-monitor-labversion-85","text":"You will learn about Monitor's functions capabilities to: Setup local development environment Add built-in Packaging Hopper assets Create a Constant Create a Python Expression Create a Python Function Add a Value card to an Asset Dashboard Create a Custom Function Maximo Asset Monitor connects devices, ingests device data, and transforms that data into meaningful insights through visualizations such as time series line and bar charts, tabular reports, and interactive diagrams. Watson IoT Platform and its additional add-on services enable organizations to capture and explore data for devices, equipment and machines, and discover insights that can drive better decision-making. Watch the Maximo Application Suite Demonstration Updated: 2021-10-02","title":"Welcome to the IBM Maximo Monitor Lab(Version: 8.5)"},{"location":"add_value_card/","text":"Objectives In this Exercise using Monitor you will learn how to : Add a value card to your asset dashboard for the new calculated metrics temperature_deviation and ambient_temp_over_max_status Now that you know when the Packaging Hopper asset is a above the ambient_temp_over_max You can display the status value of the new calculated metric named ambient_temp_over_max_status in a value card in the asset dashboard. By also adding temperature_deviation in a value card to the asset dashboard, the Remote operational support will know by how much each Hooper is operating outside the required operating ranges. Before you begin: This exercise requires that you have completed the pre-requisites required for all Exercises. This exercise requires that you have completed the previous exercise. Create Value Card Value cards allows you to display a metric or multiple metrics in a card. It is a good way to show the status of an asset. You are also able to set alert thresholds within the JSON to have different icons appear on the card to indicate a normal or irregular status. In Monitor, select Monitor tab, Open your Asset Dashboard. Search Device types for Sample_Packaging_Hopper_Type_yourinitials . Click on your Device Type , Click on asset 730001 and Asset Metrics Dashboard which is an built in dashboard Monitor created for your asset metrics. Edit the asset dashboard that you will add the Value card to. Click on gear icon. Select Edit Dashboard and click Continue button. Click on value card for temperature_deviation . Enter the values below for the Value card. Scroll up and click the Save button Scroll down on the Asset Metrics Dashboard to see the new value Card. You can further customize cards by editing their settings. Edit the dashboard again. Click on Value Card for Deviation. Click on Settings Change the font size to a smaller font. Add another Value card for the ambient_temp_over_max_status , Scroll down and click on Add Card button and repeat the step 4 above. Save your changes to the dashboard. You can also edit dashboard cards directly by modifying the JSON. Click on your value card. Click on Edit Json Some other important notes about the JSON: - The id at the very top needs to be a unique name for this card. Use dashes instead of spaces. - The size is self explanatory. This size is SMALLWIDE - The type is the type of card such as VALUE , TIMESERIES , or IMAGE . - unit is the unit of measurement belonging to your data item. - precision refers to the number of decimal points to be seen. See the full explanation of the JSON attributes for all card using the Monitor documention Click Cancel to not save your changes. Next Step Congratulations! You have completed exercises 1 to 5 and have a good understanding how to analyze and display data using functions and dashboards with Monitor. In the next exercise you will create a custom function. Do the tutorial provided in the Maximo Asset Manager Documentation.","title":"6. Add Value Card"},{"location":"add_value_card/#objectives","text":"In this Exercise using Monitor you will learn how to : Add a value card to your asset dashboard for the new calculated metrics temperature_deviation and ambient_temp_over_max_status Now that you know when the Packaging Hopper asset is a above the ambient_temp_over_max You can display the status value of the new calculated metric named ambient_temp_over_max_status in a value card in the asset dashboard. By also adding temperature_deviation in a value card to the asset dashboard, the Remote operational support will know by how much each Hooper is operating outside the required operating ranges. Before you begin: This exercise requires that you have completed the pre-requisites required for all Exercises. This exercise requires that you have completed the previous exercise.","title":"Objectives"},{"location":"add_value_card/#create-value-card","text":"Value cards allows you to display a metric or multiple metrics in a card. It is a good way to show the status of an asset. You are also able to set alert thresholds within the JSON to have different icons appear on the card to indicate a normal or irregular status. In Monitor, select Monitor tab, Open your Asset Dashboard. Search Device types for Sample_Packaging_Hopper_Type_yourinitials . Click on your Device Type , Click on asset 730001 and Asset Metrics Dashboard which is an built in dashboard Monitor created for your asset metrics. Edit the asset dashboard that you will add the Value card to. Click on gear icon. Select Edit Dashboard and click Continue button. Click on value card for temperature_deviation . Enter the values below for the Value card. Scroll up and click the Save button Scroll down on the Asset Metrics Dashboard to see the new value Card. You can further customize cards by editing their settings. Edit the dashboard again. Click on Value Card for Deviation. Click on Settings Change the font size to a smaller font. Add another Value card for the ambient_temp_over_max_status , Scroll down and click on Add Card button and repeat the step 4 above. Save your changes to the dashboard. You can also edit dashboard cards directly by modifying the JSON. Click on your value card. Click on Edit Json Some other important notes about the JSON: - The id at the very top needs to be a unique name for this card. Use dashes instead of spaces. - The size is self explanatory. This size is SMALLWIDE - The type is the type of card such as VALUE , TIMESERIES , or IMAGE . - unit is the unit of measurement belonging to your data item. - precision refers to the number of decimal points to be seen. See the full explanation of the JSON attributes for all card using the Monitor documention Click Cancel to not save your changes.","title":"Create Value Card"},{"location":"add_value_card/#next-step","text":"Congratulations! You have completed exercises 1 to 5 and have a good understanding how to analyze and display data using functions and dashboards with Monitor. In the next exercise you will create a custom function. Do the tutorial provided in the Maximo Asset Manager Documentation.","title":"Next Step"},{"location":"constant/","text":"Objectives In this Exercise using Monitor you will learn how to add a constant for the maximum allowed ambient temperature. You will: Register Constant using a script 'register_constanty.py using IOT Functions SDK Assign a value to the max_temp_yourinitials constant of 27. The ambient temperature where th Hopper Asset is located should exceed a temperature is above 27 degrees Celcius. The food packaged has a shorter shelf life when it is packaged at temperatures higher than that. A remote operational support teams monitor will monitor the packaging Hooper to ensure it is operating within the required operating ranges and without anomalies. The constant will be used to specify the maximum temperature allowed in all packaging processes to ensure regulatory compliance. Using a constant will also make it easier later to update any functions or alerts that reference the constant. By simply modifying the value of the constant all the functions and alerts will use the new value for all new calculations. Before you begin: You have completed the pre-requisites required for all Exercises You have completed the prior exercise in this lab. Register a Constant in Monitor In this exercise you will quickly create a constant named max_temp_yourinitials a that you will use in next exercises. Define your constant. You will name yours max_temp_yourinitials so that it doesn't conflict with the constants created by others. Git clone the repository that has the code below. If you don't have access email carlos.ferreira1 @ibm.com You will use the code from this repository in other exercises. From the terminal on your desktop type: ''' git clone github repo provided by your instructor cd watson-classifier ''' Ask the instructor for your credentials_as.json file or create your own using the instructions in \"Establishing a Connection\" section of the Monitor documentation. Establishing a Connection Your credentials file should be structured in JSON as follows: ''' { \"tenantId\": \"yourtenant\", \"_db_schema\": \"your_dbSchema\", \"db2\": { \"username\": \"your_dbuser\", \"password\": \"your_dbpassword\", \"databaseName\": \"your_databaseName\", \"security\": \"SSL\", \"port\": 32551, \"httpsUrl\": \"https://cp4d-cpd-cp4d.yourdomainURL\", \"host\": \"yourdomainURL without HTTP prepended\" }, \"iotp\": { \"asHost\": \"yourtenant.api.monitor.your_dbSchema.yourlusterdomain:443\", \"apiKey\": \"vourAPIKey\", \"apiToken\": \"yourAPIToken\" } } ''' Save your credentials_as.json file to in the project root directory watson-classifier . Start PyCharm select File and Open navigate to your project root directory watson-classifier and open the project The script register_constanty.py provided in the watson--classifier Github project uses IOT Functions SDK to create a constant. IOT Functions SDK In the PyCharm project tab, navigate to and expand the scripts folder. Right click on register_constant.py and select the run menu. Script code: ''' from iotfunctions.db import Database import logging logging.basicConfig(level=logging.DEBUG) logger = logging.getLogger(__name__) import json from iotfunctions.db import Database from iotfunctions.ui import UISingle,UIMulti import os logger = logging.getLogger(__name__) #Connect to the service with open('../credentials_as.json', encoding='utf-8') as F: credentials = json.loads(F.read()) db_schema = None db = Database(credentials=credentials) #Connect to the service db = Database(credentials = credentials) #Define how the constant is represented on the UI using UISingle max_temp_cf = UISingle(name='max_temp_cf', description='Ensure temperatures does not exceed max_temp_cf', datatype=float) #Register the constant using the database object db.register_constants([max_temp_cf]) ''' The script will give you errors because you haven't yet setup the virtual environment. From PyCharm menus select Run and edit configurations . Make sure to pick run and edit configuration for the register_constant.py Make sure you have setup your virtual environment in Pycharm . Once you have you can select the name of the virtual environment in PyCharm. In the projet window click on register_constant.py then from the Pycharm menu select run and edit configuration Assign a Constant a Value in Monitor In this exercise you will quickly create a constant named max_temp_yourinitials a that you will use in next exercises. Set the value of the constant from the UI. Login to Monitor. Select Setup Assets tab, search for Sample_Packaging_Hopper_Type_yourinitials . Click on your Asset Type and click on Setup Asset Type button. Click on the data tab, Click on gear icon and select Manage constants menu option A list of constants is displayed. Select the constant named max_temp_yourinitials Click Configure . Assign a value of 27 and click Save . Click Save . Next Step You now have constant for the max_temp_yourinitials that you can use in your functions and alerts in your Device Type. In the next exercise you will create a PythonFunction will use the constant for the max_temp in Celcius that the ambient temperature to check the ambient temperature hasn't been exceeded. OPTIONAL - Unregister a Constant in Monitor (Optional) Optionally you can write a unregister_constant.py script and run it after you have completed all the labs. Unregistering the constant will remove constant from Monitor. Any calculation that uses this constant will stop working and cause the Monitor pipeline calculations to stop. Example code: ``` #Import packages and libraries import logging logging.basicConfig(level=logging.DEBUG) logger = logging.getLogger(__name__) import pandas as pd import json #Import these classes from IoT Functions from iotfunctions.db import Database from iotfunctions.ui import UISingle,UIMulti #Connect to the service with open('credentials_as.json', encoding='utf-8') as F: credentials = json.loads(F.read()) db_schema = None db = Database(credentials=credentials) #Connect to the service db = Database(credentials = credentials) #Unregister the constant using the database object db.unregister_constants(['max_temp_yourinitials']) ```","title":"3. Create Constants"},{"location":"constant/#objectives","text":"In this Exercise using Monitor you will learn how to add a constant for the maximum allowed ambient temperature. You will: Register Constant using a script 'register_constanty.py using IOT Functions SDK Assign a value to the max_temp_yourinitials constant of 27. The ambient temperature where th Hopper Asset is located should exceed a temperature is above 27 degrees Celcius. The food packaged has a shorter shelf life when it is packaged at temperatures higher than that. A remote operational support teams monitor will monitor the packaging Hooper to ensure it is operating within the required operating ranges and without anomalies. The constant will be used to specify the maximum temperature allowed in all packaging processes to ensure regulatory compliance. Using a constant will also make it easier later to update any functions or alerts that reference the constant. By simply modifying the value of the constant all the functions and alerts will use the new value for all new calculations. Before you begin: You have completed the pre-requisites required for all Exercises You have completed the prior exercise in this lab.","title":"Objectives"},{"location":"constant/#register-a-constant-in-monitor","text":"In this exercise you will quickly create a constant named max_temp_yourinitials a that you will use in next exercises. Define your constant. You will name yours max_temp_yourinitials so that it doesn't conflict with the constants created by others. Git clone the repository that has the code below. If you don't have access email carlos.ferreira1 @ibm.com You will use the code from this repository in other exercises. From the terminal on your desktop type: ''' git clone github repo provided by your instructor cd watson-classifier ''' Ask the instructor for your credentials_as.json file or create your own using the instructions in \"Establishing a Connection\" section of the Monitor documentation. Establishing a Connection Your credentials file should be structured in JSON as follows: ''' { \"tenantId\": \"yourtenant\", \"_db_schema\": \"your_dbSchema\", \"db2\": { \"username\": \"your_dbuser\", \"password\": \"your_dbpassword\", \"databaseName\": \"your_databaseName\", \"security\": \"SSL\", \"port\": 32551, \"httpsUrl\": \"https://cp4d-cpd-cp4d.yourdomainURL\", \"host\": \"yourdomainURL without HTTP prepended\" }, \"iotp\": { \"asHost\": \"yourtenant.api.monitor.your_dbSchema.yourlusterdomain:443\", \"apiKey\": \"vourAPIKey\", \"apiToken\": \"yourAPIToken\" } } ''' Save your credentials_as.json file to in the project root directory watson-classifier . Start PyCharm select File and Open navigate to your project root directory watson-classifier and open the project The script register_constanty.py provided in the watson--classifier Github project uses IOT Functions SDK to create a constant. IOT Functions SDK In the PyCharm project tab, navigate to and expand the scripts folder. Right click on register_constant.py and select the run menu. Script code: ''' from iotfunctions.db import Database import logging logging.basicConfig(level=logging.DEBUG) logger = logging.getLogger(__name__) import json from iotfunctions.db import Database from iotfunctions.ui import UISingle,UIMulti import os logger = logging.getLogger(__name__) #Connect to the service with open('../credentials_as.json', encoding='utf-8') as F: credentials = json.loads(F.read()) db_schema = None db = Database(credentials=credentials) #Connect to the service db = Database(credentials = credentials) #Define how the constant is represented on the UI using UISingle max_temp_cf = UISingle(name='max_temp_cf', description='Ensure temperatures does not exceed max_temp_cf', datatype=float) #Register the constant using the database object db.register_constants([max_temp_cf]) ''' The script will give you errors because you haven't yet setup the virtual environment. From PyCharm menus select Run and edit configurations . Make sure to pick run and edit configuration for the register_constant.py Make sure you have setup your virtual environment in Pycharm . Once you have you can select the name of the virtual environment in PyCharm. In the projet window click on register_constant.py then from the Pycharm menu select run and edit configuration","title":"Register a Constant in Monitor"},{"location":"constant/#assign-a-constant-a-value-in-monitor","text":"In this exercise you will quickly create a constant named max_temp_yourinitials a that you will use in next exercises. Set the value of the constant from the UI. Login to Monitor. Select Setup Assets tab, search for Sample_Packaging_Hopper_Type_yourinitials . Click on your Asset Type and click on Setup Asset Type button. Click on the data tab, Click on gear icon and select Manage constants menu option A list of constants is displayed. Select the constant named max_temp_yourinitials Click Configure . Assign a value of 27 and click Save . Click Save .","title":"Assign a Constant a Value in Monitor"},{"location":"constant/#next-step","text":"You now have constant for the max_temp_yourinitials that you can use in your functions and alerts in your Device Type. In the next exercise you will create a PythonFunction will use the constant for the max_temp in Celcius that the ambient temperature to check the ambient temperature hasn't been exceeded.","title":"Next Step"},{"location":"constant/#optional-unregister-a-constant-in-monitor-optional","text":"Optionally you can write a unregister_constant.py script and run it after you have completed all the labs. Unregistering the constant will remove constant from Monitor. Any calculation that uses this constant will stop working and cause the Monitor pipeline calculations to stop. Example code: ``` #Import packages and libraries import logging logging.basicConfig(level=logging.DEBUG) logger = logging.getLogger(__name__) import pandas as pd import json #Import these classes from IoT Functions from iotfunctions.db import Database from iotfunctions.ui import UISingle,UIMulti #Connect to the service with open('credentials_as.json', encoding='utf-8') as F: credentials = json.loads(F.read()) db_schema = None db = Database(credentials=credentials) #Connect to the service db = Database(credentials = credentials) #Unregister the constant using the database object db.unregister_constants(['max_temp_yourinitials']) ```","title":"OPTIONAL - Unregister a Constant in Monitor (Optional)"},{"location":"getting_started/","text":"Getting Started with the IBM Maximo Monitor v8.5 Lab! Students doing these exercises and facilitators preparing for delivering the exercises should read the instructions . These labs are still under development as Monitor v8.5 was just released. Please Contributing to Labs providing us feedback by enhancements or bugs via Survicate Net Promoter score surveys if you are asked. We also welcome your contributions to existing or new exercises. Learning Goals Goal Recommended Activities Time Needed Setup local development environment Setup your local development environment 1.5 hours Create a Packaging Asset Exercise 1 15 mins Create a Constant Exercise 2 15 mins Create a Python Function Exercise 3 30 mins Create a Python Expression Exercise 4 5 mins Add a Value card to an Asset Dashboard Exercise 5 5 hours Create a Custom Function Exercise 6 2 hours Overview of Maximo Monitor Read an overview of Maximo Monitor Demonstration of Monitor Ask your facilitator for a demonstration of Maxiom Asset Monitor or watch this short 7 minute video demonstration Objectives In these labs using Monitor you will learn how to : Setup local development environment Add Example Packaging Hopper Asset Add a Constant Add a PythonFunction Add a PythonExpression Add a Value card to an Asset Dashboard The Packaging Hopper Asset will provide the timeseries data that we will use in the exercise to determine how frequently the ambient temperature is above 27 degrees Celcius. The food that is being packaged has a shorter shelf life when it is packaged at higher temperatures. Remote operational support teams monitor the Hooper to ensure it is operating within the required operating ranges and without anomalies. The Python Function will add a new column of data with a value of 1 each time the ambient temperature is above the max temperature constant. The maximum temperature constant is set to 27 degrees Celcius. When the ambient temperature is below the maximum temperature constant assign a value of 0. You can then sum or aggregate the number of time the ambient temperature exceeded the maximum temperature constant for some chosen time period. Common aggregation periods are 1 hour, 1 day, 7 days, 1 month, 1 quarter and 1 year. The Python Expression will that will calculate the temperature_deviation between the ambient_temp and max_temp_YI . Monitor automatically creates asset dashboards for your. You will add a Value card to a built in Asset Dashboard.","title":"Get Started"},{"location":"getting_started/#getting-started-with-the-ibm-maximo-monitor-v85-lab","text":"Students doing these exercises and facilitators preparing for delivering the exercises should read the instructions . These labs are still under development as Monitor v8.5 was just released. Please Contributing to Labs providing us feedback by enhancements or bugs via Survicate Net Promoter score surveys if you are asked. We also welcome your contributions to existing or new exercises.","title":"Getting Started with the IBM Maximo Monitor v8.5 Lab!"},{"location":"getting_started/#learning-goals","text":"Goal Recommended Activities Time Needed Setup local development environment Setup your local development environment 1.5 hours Create a Packaging Asset Exercise 1 15 mins Create a Constant Exercise 2 15 mins Create a Python Function Exercise 3 30 mins Create a Python Expression Exercise 4 5 mins Add a Value card to an Asset Dashboard Exercise 5 5 hours Create a Custom Function Exercise 6 2 hours","title":"Learning Goals"},{"location":"getting_started/#overview-of-maximo-monitor","text":"Read an overview of Maximo Monitor","title":"Overview of Maximo Monitor"},{"location":"getting_started/#demonstration-of-monitor","text":"Ask your facilitator for a demonstration of Maxiom Asset Monitor or watch this short 7 minute video demonstration","title":"Demonstration of Monitor"},{"location":"getting_started/#objectives","text":"In these labs using Monitor you will learn how to : Setup local development environment Add Example Packaging Hopper Asset Add a Constant Add a PythonFunction Add a PythonExpression Add a Value card to an Asset Dashboard The Packaging Hopper Asset will provide the timeseries data that we will use in the exercise to determine how frequently the ambient temperature is above 27 degrees Celcius. The food that is being packaged has a shorter shelf life when it is packaged at higher temperatures. Remote operational support teams monitor the Hooper to ensure it is operating within the required operating ranges and without anomalies. The Python Function will add a new column of data with a value of 1 each time the ambient temperature is above the max temperature constant. The maximum temperature constant is set to 27 degrees Celcius. When the ambient temperature is below the maximum temperature constant assign a value of 0. You can then sum or aggregate the number of time the ambient temperature exceeded the maximum temperature constant for some chosen time period. Common aggregation periods are 1 hour, 1 day, 7 days, 1 month, 1 quarter and 1 year. The Python Expression will that will calculate the temperature_deviation between the ambient_temp and max_temp_YI . Monitor automatically creates asset dashboards for your. You will add a Value card to a built in Asset Dashboard.","title":"Objectives"},{"location":"hopper_asset/","text":"Objectives In this Exercise using Monitor you will learn how to : Add built-in Monitor Packaing Hopper Asset The Monitor built-in Packaging Hopper Asset will provide the timeseries data that you will use in the exercise to determine how frequently the ambient temperature is above 27 degrees Celcius. The food that is being packaged has a shorter shelf life when it is packaged at higher temperatures. Remote operational support teams monitor the Packaging Hopper to ensure it is operating within the required operating ambient temperature ranges and without anomalies. Before you begin: This exercise requires that you have completed the pre-requisites required for all Exercises Ensure you instructor has provided you the notebooks needed for this lab. Create a Packaging Hopper in Monitor In this exercise you quickly create some simulated packaging hopper operational time series data that you will use in your exercises. You will analyze the data from simulated industry hopper within Monitor functions and alerts. You will also create a constant for the maximum temperature maximum_temp in degrees celcius that is allowed. Click Setup side menu to add a new asset type using a Sample Packagin Hopper Type asset template in Monitor. Click Sample Packaging Hopper type You will create a simulated set of packaging assets (entities). Click Next button. Append your initials to the Asset Type Name and click on Next button. Note how Monitor has added 5 Hoppers with IDs of 71000 to 710004. Click on your Asset Type and click on Setup Asset Type button. Note how Monitor has added an instance asset dashboard for each Hoppers with IDs of 71000 to 710004. Click on your Monitor Tab Click on one of the Hopper assets like 73000 to see it's data. Next Step You now have asset time series data for 5 asset that you can analyze and Monitor. In the next exercise you will add a constant for the max_temp_celcius. The PythonFunction will use the constant for the max_temp in Celcius that the ambient temperature can be.","title":"2. Create Packaging Hopper Assets"},{"location":"hopper_asset/#objectives","text":"In this Exercise using Monitor you will learn how to : Add built-in Monitor Packaing Hopper Asset The Monitor built-in Packaging Hopper Asset will provide the timeseries data that you will use in the exercise to determine how frequently the ambient temperature is above 27 degrees Celcius. The food that is being packaged has a shorter shelf life when it is packaged at higher temperatures. Remote operational support teams monitor the Packaging Hopper to ensure it is operating within the required operating ambient temperature ranges and without anomalies. Before you begin: This exercise requires that you have completed the pre-requisites required for all Exercises Ensure you instructor has provided you the notebooks needed for this lab.","title":"Objectives"},{"location":"hopper_asset/#create-a-packaging-hopper-in-monitor","text":"In this exercise you quickly create some simulated packaging hopper operational time series data that you will use in your exercises. You will analyze the data from simulated industry hopper within Monitor functions and alerts. You will also create a constant for the maximum temperature maximum_temp in degrees celcius that is allowed. Click Setup side menu to add a new asset type using a Sample Packagin Hopper Type asset template in Monitor. Click Sample Packaging Hopper type You will create a simulated set of packaging assets (entities). Click Next button. Append your initials to the Asset Type Name and click on Next button. Note how Monitor has added 5 Hoppers with IDs of 71000 to 710004. Click on your Asset Type and click on Setup Asset Type button. Note how Monitor has added an instance asset dashboard for each Hoppers with IDs of 71000 to 710004. Click on your Monitor Tab Click on one of the Hopper assets like 73000 to see it's data.","title":"Create a Packaging Hopper in Monitor"},{"location":"hopper_asset/#next-step","text":"You now have asset time series data for 5 asset that you can analyze and Monitor. In the next exercise you will add a constant for the max_temp_celcius. The PythonFunction will use the constant for the max_temp in Celcius that the ambient temperature can be.","title":"Next Step"},{"location":"prereqs/","text":"Pre-Requisite Instructions Here are the required pre-requisites for the Maximo Monitor v8.5 exercises. All Exercises All Exercises require that you have the following experience and setup complete. Experience Python Programming Experience Pandas and Numpy programming experience Command line scripting and shell on Mac OS or Windows Setup Desktop environment with network access to IBM Cloud Setup your Python v3.7 Development environment Your instructor has provided you the data and sample notebooks used in these labs. Ask your administrator or instructor for the credentials file to access Monitor programmatically. See section Establishing a Connection IBM ID and IBM Cloud ID. If you don't have an IBM ID you can get one here : Click Login to MY IBM button Click Create an IBM ID link User and network access to Maximo Asset Monitor Maximo Application Suite v8.5 User and network access to IBM Cloud Pack for Data and Watson Studio Plan User access to Github Repositories provided by the instructor Ability to download apps for Setup Local Environment A computer with a Firefox or Chrome browser and internet connectivity. Your exercise facilitator should have provided you with the information for access.","title":"Pre-Requisites"},{"location":"prereqs/#pre-requisite-instructions","text":"Here are the required pre-requisites for the Maximo Monitor v8.5 exercises.","title":"Pre-Requisite Instructions"},{"location":"prereqs/#all-exercises","text":"All Exercises require that you have the following experience and setup complete.","title":"All Exercises"},{"location":"prereqs/#experience","text":"Python Programming Experience Pandas and Numpy programming experience Command line scripting and shell on Mac OS or Windows","title":"Experience"},{"location":"prereqs/#setup","text":"Desktop environment with network access to IBM Cloud Setup your Python v3.7 Development environment Your instructor has provided you the data and sample notebooks used in these labs. Ask your administrator or instructor for the credentials file to access Monitor programmatically. See section Establishing a Connection IBM ID and IBM Cloud ID. If you don't have an IBM ID you can get one here : Click Login to MY IBM button Click Create an IBM ID link User and network access to Maximo Asset Monitor Maximo Application Suite v8.5 User and network access to IBM Cloud Pack for Data and Watson Studio Plan User access to Github Repositories provided by the instructor Ability to download apps for Setup Local Environment A computer with a Firefox or Chrome browser and internet connectivity. Your exercise facilitator should have provided you with the information for access.","title":"Setup"},{"location":"python_expressions/","text":"Objectives In this Exercise using Monitor you will learn how to : Create a PythonExpression Operations wants to be alerted when the temperature deviates more than 10 degress celcius. Create a PythonExpression to calculate the temperature_deviation by subtracting ambient_temp from the max_temp_YI constant you creted in the last exercise. You can use this calculated metric as an input an Alert Expression in inform the Monitor Remote operational support can be alerted when a packaging asset is operating too fare outside the required operating ranges. The PythonExpression will add a new calculated metric temperature_deviation that you wil add to your asset dashboard. Before you begin: This exercise requires that you have completed the pre-requisites required for all Exercises. This exercise requires that you have completed the previous exercise. Create a Python Expression in Monitor In Monitor, select Setup Assets tab, search for Sample_Packaging_Hopper_Type_yourinitials . Click on your Device Type and click on Setup Asset Type button. Click Data tab, + button to add a new calculated metric from the catalog. Enter Puthon in the search field of the Monitor catalog. Click PythonExpression option and the Select button to add the function to your Asset Type . Set the calculation data item expression to the value below. This will calculate the difference between the ambient temperature and the maximum temperature constant you added in the previous exercise. df['ambient_temp']-c['max_temp_cf'] Set the output name to temperature_deviation Next Step Nice work getting to here. In the next exercise, you will add your calculated metrics ambient_temp_over_max_status , temperature_deviation and ambient_temp_over_max_status to your asset dashboard.","title":"5. Create Python Expressions"},{"location":"python_expressions/#objectives","text":"In this Exercise using Monitor you will learn how to : Create a PythonExpression Operations wants to be alerted when the temperature deviates more than 10 degress celcius. Create a PythonExpression to calculate the temperature_deviation by subtracting ambient_temp from the max_temp_YI constant you creted in the last exercise. You can use this calculated metric as an input an Alert Expression in inform the Monitor Remote operational support can be alerted when a packaging asset is operating too fare outside the required operating ranges. The PythonExpression will add a new calculated metric temperature_deviation that you wil add to your asset dashboard. Before you begin: This exercise requires that you have completed the pre-requisites required for all Exercises. This exercise requires that you have completed the previous exercise.","title":"Objectives"},{"location":"python_expressions/#create-a-python-expression-in-monitor","text":"In Monitor, select Setup Assets tab, search for Sample_Packaging_Hopper_Type_yourinitials . Click on your Device Type and click on Setup Asset Type button. Click Data tab, + button to add a new calculated metric from the catalog. Enter Puthon in the search field of the Monitor catalog. Click PythonExpression option and the Select button to add the function to your Asset Type . Set the calculation data item expression to the value below. This will calculate the difference between the ambient temperature and the maximum temperature constant you added in the previous exercise. df['ambient_temp']-c['max_temp_cf'] Set the output name to temperature_deviation","title":"Create a Python Expression in Monitor"},{"location":"python_expressions/#next-step","text":"Nice work getting to here. In the next exercise, you will add your calculated metrics ambient_temp_over_max_status , temperature_deviation and ambient_temp_over_max_status to your asset dashboard.","title":"Next Step"},{"location":"python_function/","text":"Objectives In this Exercise using Monitor you will learn how to : Add a Python Function to check if the ambient temperature is greater than the maximum allowed ambient temperature constant. The ambient temperature where the hopper asset is located should not exceed a temperature above 27 degrees. The food being packaged has a shorter shelf life when it is packaged at temperatures higher than that. A remote operational support teams monitor monitors the packaging hoppers to ensure they are all operating within the required operating ranges and without anomalies. Before you begin: - You have completed the pre-requisites required for all exercises - You have completed the prior exercise in this lab. Create a Python Function to Monitor In Monitor, select Setup Assets tab, search for Sample_Packaging_Hopper_Type_yourinitials . Click on your Device Type and click on Setup Asset Type button. Click Data tab, + button to add a new calculated metric from the catalog. Click + button and enter Puthon in the search field of the Monitor catalog. Click PythonFucntion option and the Select button to add the function to your Asset Type . Set the calculation data item inputs. Select ambient_temp from the Data Item field Past the code below into the function_code This will assign a value of one to this metric each time the metric value for ambient_temp is equal to or above 27. def f(df, parameters=None): import numpy as np return np.where(df['ambient_temp'] >= 27, 1, 0) Click the next button Configure the function calculation schedule. Click the schedule slider to edit the schedule. Enter 7 in the field calculating the last and changet time to days instead of minutes . Also set the output name to ambient_temp_over_max Set the Output Type to string then set it back to number then click on Create button. !!! note If you encounter the error below, you likely hit a bug. Carefully redo the step 8. Wait 5 minutes and make sure your function doesn't have any errors and causes the pipeline analysis to stop. If it does you will see an error. Click on the Analysis Stopped error Read the message to trouble shoot. If you need more information download the log file to trouble shoot the error further. Click on the calculated metric max_temp_yourinitials and the data table tab to see the time series data added to your Device Type. Sort the data by clicking on ambient_temp_over_max . Note how there are now 1's and 0's for the times when the ambient temperature was above max_temp_yourinitials for each packaging hopper. Go back and now update the PythonFucntion you created in step 3. Modify the code to reference the constant you created in the previous exercise. Expand the Calculated metrics and click the ambient_temp_over_max . Click on the open function icon on the top right to modify the code. Add a another pythonfunction to evaluate the the ambient_temp_over_max and set a new calculated metric named ambient_temp_over_max_status of type string to exceeds or normal when the value is 1 or 0 respectively. ``` def f(df, parameters=None): import numpy as np return np.where(df['ambient_temp_over_max'] == 1, \"Exceeds\", \"Normal\") ``` Next steps You now have a new calculated metric that will have a value of 1 each time the ambient temperature exceeds 27 degress Celcius or 0 if it is less than or equal to 27 degrees. In the next exercise you wil create a PythonExpression to calculate the temperature_deviation between the ambient_temp and the ambient_temp_over_max .","title":"4. Create Python Functions"},{"location":"python_function/#objectives","text":"In this Exercise using Monitor you will learn how to : Add a Python Function to check if the ambient temperature is greater than the maximum allowed ambient temperature constant. The ambient temperature where the hopper asset is located should not exceed a temperature above 27 degrees. The food being packaged has a shorter shelf life when it is packaged at temperatures higher than that. A remote operational support teams monitor monitors the packaging hoppers to ensure they are all operating within the required operating ranges and without anomalies. Before you begin: - You have completed the pre-requisites required for all exercises - You have completed the prior exercise in this lab.","title":"Objectives"},{"location":"python_function/#create-a-python-function-to-monitor","text":"In Monitor, select Setup Assets tab, search for Sample_Packaging_Hopper_Type_yourinitials . Click on your Device Type and click on Setup Asset Type button. Click Data tab, + button to add a new calculated metric from the catalog. Click + button and enter Puthon in the search field of the Monitor catalog. Click PythonFucntion option and the Select button to add the function to your Asset Type . Set the calculation data item inputs. Select ambient_temp from the Data Item field Past the code below into the function_code This will assign a value of one to this metric each time the metric value for ambient_temp is equal to or above 27. def f(df, parameters=None): import numpy as np return np.where(df['ambient_temp'] >= 27, 1, 0) Click the next button Configure the function calculation schedule. Click the schedule slider to edit the schedule. Enter 7 in the field calculating the last and changet time to days instead of minutes . Also set the output name to ambient_temp_over_max Set the Output Type to string then set it back to number then click on Create button. !!! note If you encounter the error below, you likely hit a bug. Carefully redo the step 8. Wait 5 minutes and make sure your function doesn't have any errors and causes the pipeline analysis to stop. If it does you will see an error. Click on the Analysis Stopped error Read the message to trouble shoot. If you need more information download the log file to trouble shoot the error further. Click on the calculated metric max_temp_yourinitials and the data table tab to see the time series data added to your Device Type. Sort the data by clicking on ambient_temp_over_max . Note how there are now 1's and 0's for the times when the ambient temperature was above max_temp_yourinitials for each packaging hopper. Go back and now update the PythonFucntion you created in step 3. Modify the code to reference the constant you created in the previous exercise. Expand the Calculated metrics and click the ambient_temp_over_max . Click on the open function icon on the top right to modify the code. Add a another pythonfunction to evaluate the the ambient_temp_over_max and set a new calculated metric named ambient_temp_over_max_status of type string to exceeds or normal when the value is 1 or 0 respectively. ``` def f(df, parameters=None): import numpy as np return np.where(df['ambient_temp_over_max'] == 1, \"Exceeds\", \"Normal\") ```","title":"Create a Python Function to Monitor"},{"location":"python_function/#next-steps","text":"You now have a new calculated metric that will have a value of 1 each time the ambient temperature exceeds 27 degress Celcius or 0 if it is less than or equal to 27 degrees. In the next exercise you wil create a PythonExpression to calculate the temperature_deviation between the ambient_temp and the ambient_temp_over_max .","title":"Next steps"},{"location":"release_notes/","text":"Contributors to IBM Maximo Template Carlos Ferreira - carlos.ferreira1@ibm.com Change Information Date By Description 2024-01-02 Jan Ekstr\u00f8m Restructured to work on Github Pages. 2021-10-04 Carlos Ferreira Content for about, constants, python functions, python expressions, custom functions and setting up pre-reqs.","title":"Release Notes"},{"location":"release_notes/#contributors-to-ibm-maximo-template","text":"Carlos Ferreira - carlos.ferreira1@ibm.com","title":"Contributors to IBM Maximo Template"},{"location":"release_notes/#change-information","text":"Date By Description 2024-01-02 Jan Ekstr\u00f8m Restructured to work on Github Pages. 2021-10-04 Carlos Ferreira Content for about, constants, python functions, python expressions, custom functions and setting up pre-reqs.","title":"Change Information"},{"location":"setup_local_environment/","text":"Setup Local Environment In this exercise you will setup your local development environment. Install and Create a Virtual Environment for Python v3.7.6 or later Setup and Activate a Virtual Environment Install Python dependencies, clone repository and verify environment Install and Launch Jupyter to work with Regression Models Download, Install and Configure CyberDuck for View Logs in Monitor Download, Install and Configure PyCharm Debug Functions !!! note These directions for are a Mac. Using Python v3.7.9 for Maximo Application Suite v8.5. Download Python for Windows at https://www.python.org/downloads/windows/ Install and Create a Virtual Environment Search for and download the right version of Python Launch Terminal Mac users need to install Brew Follow directions here: https://brew.sh/ Install the right Python Version v3.7.9 Mac users - In terminal: ``` brew install python ``` Window users Please see available public references for installing Python on Windows Install \"pip\". (Python Package Installer): sudo easy_install pip # for Mac try also removing sudo from the command Install virtual environment to keep dependencies separate from other projects ### For Mac sudo pip install virtualenv ### For Windows pip install virtualenv Create a virtual environment use Python 3.7.9 for Maximo Application Suite v8.3 python3 -m venv iot-python3 Setup and Activate a Virtual Environment Open a new terminal window and change directory to your Virtual Environment directory. cd iot-python3 Activate your virtual environment. For Mac source bin/activate For Windows .\\Scripts\\activate The result in Terminal should be something like: For Mac (iot-python3) My-Mac: myuserid$ Install Git. For Windows See https://git-scm.com/download/win For Mac The easiest is to install the Xcode Command Line Tools. Install IOT Functions SDK See installing section instructions but for MAS v8.5.1 use this: ``` pip install git+git://github.com/ibm-watson-iot/functions@master --upgrade ``` Clone the your project github repository. git clone https://github.com/`your custom functions project` cd `your custom functions project` Within your project directory in the activated virtual environment, install Monitor Python Custom Functions SDK and dependencies. pip install -r requirements.txt Apply export variables in terminal for DYLD_LIBRARY_PATH for DB2 jars on Mac OS X only. For Mac cd `your custom functions project` export DYLD_LIBRARY_PATH=<\"replace with your virtual env directory>\"/lib/python3.7/site-packages/clidriver/lib:$DYLD_LIBRARY_PATH export DYLD_LIBRARY_PATH=/Users/carlosferreira/ve/iot-python3/lib/python3.7/site-packages/clidriver/lib:$DYLD_LIBRARY_PATH Prepend your project directory to the PYTHONPATH. For Mac export PYTHONPATH=<replace with your project dir>/your custom functions project:$PYTHONPATH If you are using Pycharm as your IDE you may also want to set your interpreter. Save credentials to your project root folder. If you are using Monitor SaaS, click on Services , click View Details of Watson IOT Analytics. Click on Copy and paste icon and copy the credentials into a file named beta-1_credentials.json file. Save the file in the project git cloned project directory name directory your custom functions project . If you are using Monitor in MAS, ask the instructor for your credentials_as.json file or create your own using the instructions in \"Establishing a Connection\" section of the Monitor documentation. Establishing a Connection Your credentials file should be structured in JSON as follows: ''' { \"tenantId\": \"yourtenant\", \"_db_schema\": \"your_dbSchema\", \"db2\": { \"username\": \"your_dbuser\", \"password\": \"your_dbpassword\", \"databaseName\": \"your_databaseName\", \"security\": \"SSL\", \"port\": 32551, \"httpsUrl\": \"https://cp4d-cpd-cp4d.yourdomainURL\", \"host\": \"yourdomainURL without HTTP prepended\" }, \"iotp\": { \"asHost\": \"yourtenant.api.monitor.your_dbSchema.yourlusterdomain:443\", \"apiKey\": \"vourAPIKey\", \"apiToken\": \"yourAPIToken\" } } ''' Save your credentials_as.json file to in the project root directory watson-classifier . Verify that you can get a local Python Script to run without errors. python ./scripts/local_test_of_function.py Install and Launch Jupyter Jupyter is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations and algorithms for working with AI Models and functions. Install Jupyter using instructions Use the Pip Install option. Start Jupyter Notebook process. Using a similar example steps below. cd /Users/student01/ve/iot-python3/bin source activate cd /Users/student01/MAS_AutoAI export PYTHONPATH=/Users/student01/MAS_AutoAI export DYLD_LIBRARY_PATH=/Users/student01/ve/iot-python3/lib/python3.7/site-packages/clidriver/lib:$DYLD_LIBRARY_PATH Launch Jupyter Notebook to edit Linear Regression Models. jupyter notebook This opens a Jupyter notebook in the new browser window that opened. Browse to the notebooks folder. Click on the notebook to view the Notebook. Download, Install and Configure CyberDuck for View Logs in Monitor Depending on the version of Monitor it may use either the Database or Object Storage service store logs. To access the log files for custom functions in Cloud Object Storage. Install and configure Cyberduck to view logs. Connect to the Cloud Object Storage (COS) to download the custom function logs. You can access the credentials for accessing the service in Monitor under Services tab. Use tool called Cyberduck. Download free version from: Web: https://cyberduck.io/download/ Configure the setting in CyberDuck to connect to the Object Storage service included with Monitor. In Monitor, click on Services menu. Copy the settings for Object Storage as shown in the below into CyberDuck . Open CyberDuck and create a New Connection . Select Protocol is S3 Amazon URL Server is taken from Monitor Object Storage Service Cross Region Endpoints choose your region like US https://s3-api.us-geo.objectstorage.softlayer.net Copy Access Key ID for your Tenant ID Copy Secret Access Key for your Tenant ID Click Connect Button. Hit refresh and navigate to your Asset Type and date folder to see and download your log files. You will see Entity_Type_ID in the first few lines of the log files for that Asset Type . Bookmark the page for your Asset Type so that you can navigate here directly next time you want to access logs. Download, Install and Configure DBeaver Depending on the version of Monitor it may use either the Database or Object Storage service store logs. To access the log files for custom functions in Database, install and configure Dbeaver client to view logs in the database table. Connect to the Monitor Database Service to query database for custom function logs. You can get the database credentials for accessing the database service in Monitor under Services tab. Use a universal database client tool like Dbeaver to access the table. Download the free community edition from https://dbeaver.io/download/ Configure the setting in Dbeaver to connect to the Database service included with Monitor. In Monitor, click on Services menu. Copy the settings for Database and enter them as as shown in DBeaver . Open Dbeaver . Select a New Database Connection option from the Database menu. Select IBM DB2 and click on Next button. Enter the database settings from Monitor Database Service in DBeaver connection settings dialog. Click test Connection Button. Click OK Button to save the connection. Query Logs using DBeaver Depending on the version of Monitor it may use either the Database or Object Storage service store logs. To access the log files for custom functions in Database use the following queries with Dbeaver client to view logs. Open Dbeaver . Click a Monitor Database Connection for BLUDB schema. Select New SQL Script from the SQL Editor menu. Enter the the following query to get status of execution for all functions. SELECT E.NAME, K.ENTITY_TYPE_ID, K.STATUS, COUNT(*) AS Count FROM MAS82_MAM.KPI_LOGGING K, IOTANALYTICS.ENTITY_TYPE E WHERE K.ENTITY_TYPE_ID = E.ENTITY_TYPE_ID GROUP BY E.NAME ,K.ENTITY_TYPE_ID,K.STATUS ; Enter the the following query to delete old logs. DELETE FROM MAS82_MAM.KPI_LOGGING WHERE DATE(UPDATED_TS)!=CURRENT_DATE; Enter the the following query to purge successful runs. DELETE FROM MAS82_MAM.KPI_LOGGING WHERE STATUS='SUCCESS' AND ENTITY_TYPE_ID IN (13,14); Enter the the following query to get last 10 logs. SELECT E.NAME, K.ENTITY_TYPE_ID, K.STATUS, K.LOGFILE, K.LOG_MESSAGE, K.ERROR_MESSAGE, K.STARTED_TS FROM MAS82_MAM.KPI_LOGGING K, IOTANALYTICS.ENTITY_TYPE E WHERE K.ENTITY_TYPE_ID = E.ENTITY_TYPE_ID ORDER BY K.STARTED_TS DESC LIMIT 10; Download, Install and Configure PyCharm Using an integrated development environment helps improve developer productivity when writing Python scripts and Monitor Custom Functions. It is recommended that you download and install Pycharme Community Edition . It is a free IDE. To run Python Scripts in you should configure your Python Environment for each script you would like to run to reference the virtual environment you setup earlier. Follow the instructions to install Pycharm Community Edition. Start Pycharm. In the Project view, right click on the Python script file you want to run. Select edit configurations . See the example settings below. Set the Python Environment variable similar to what is shown below. It should reflect the installation directory of your virtual environment. PYTHONUNBUFFERED=1;DYLD_LIBRARY_PATH=/Users/student01/ve/iot-python3/lib/python3.7/site-packages/clidriver/lib:$DYLD_LIBRARY_PATH;PYTHONPATH=/Users/student01/MAS_AutoAI Set the Python interpreter to your virtual environment. Choose Pycharm , Preferences Search on interpreter , select Virtual Environment , select Existing Environment , Browse and select your Python Virtual Environment Each time you run a Python script in Pyscharm remember to select the name of the virtual environment inter Setup and Activate a Virtual Environment Open a new terminal window and change directory to your Virtual Environment directory. cd iot-python3 Activate your virtual environment. For Mac source bin/activate For Windows .\\Scripts\\activate The result in Terminal should be something like: For Mac (iot-python3) My-Mac: myuserid$ Install Git. For Windows See https://git-scm.com/download/win For Mac The easiest is to install the Xcode Command Line Tools. Install IOT Functions SDK See instructions but for MAS v8.5.1 try this: ``` pip install git+git://github.com/ibm-watson-iot/functions@master --upgrade ``` Clone the your project github repository. git clone https://github.com/`your custom functions project` cd `your custom functions project` Within your project directory in the activated virtual environment, install Monitor Python Custom Functions SDK and dependencies. pip install -r requirements.txt Apply export variables in terminal for DYLD_LIBRARY_PATH for DB2 jars on Mac OS X only. For Mac cd `your custom functions project` export DYLD_LIBRARY_PATH=<\"replace with your virtual env directory>\"/lib/python3.7/site-packages/clidriver/lib:$DYLD_LIBRARY_PATH export DYLD_LIBRARY_PATH=/Users/carlosferreira/ve/iot-python3/lib/python3.7/site-packages/clidriver/lib:$DYLD_LIBRARY_PATH Prepend your project directory to the PYTHONPATH. For Mac export PYTHONPATH=<replace with your project dir>/your custom functions project:$PYTHONPATH If you are using Pycharm as your IDE you may also want to set Save credentials to your project root folder. If you are using Monitor SaaS, click on Services , click View Details of Watson IOT Analytics. Click on Copy and paste icon and copy the credentials into a file named beta-1_credentials.json file. Save the file in the project git cloned project directory name directory your custom functions project . If you are using Monitor in MAS, ask the instructor for your credentials_as.json file or create your own using the instructions in \"Establishing a Connection\" section of the Monitor documentation. Establishing a Connection Your credentials file should be structured in JSON as follows: ''' { \"tenantId\": \"yourtenant\", \"_db_schema\": \"your_dbSchema\", \"db2\": { \"username\": \"your_dbuser\", \"password\": \"your_dbpassword\", \"databaseName\": \"your_databaseName\", \"security\": \"SSL\", \"port\": 32551, \"httpsUrl\": \"https://cp4d-cpd-cp4d.yourdomainURL\", \"host\": \"yourdomainURL without HTTP prepended\" }, \"iotp\": { \"asHost\": \"yourtenant.api.monitor.your_dbSchema.yourlusterdomain:443\", \"apiKey\": \"vourAPIKey\", \"apiToken\": \"yourAPIToken\" } } ''' Save your credentials_as.json file to in the project root directory watson-classifier . Verify that you can get a local Python Script to run without errors. python ./scripts/local_test_of_function.py Install and Launch Jupyter Jupyter is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations and algorithms for working with AI Models and functions. Install Jupyter using instructions Use the Pip Install option. Start Jupyter Notebook process. Using a similar example steps below. cd /Users/student01/ve/iot-python3/bin source activate cd /Users/student01/MAS_AutoAI export PYTHONPATH=/Users/student01/MAS_AutoAI export DYLD_LIBRARY_PATH=/Users/student01/ve/iot-python3/lib/python3.7/site-packages/clidriver/lib:$DYLD_LIBRARY_PATH Launch Jupyter Notebook to edit Linear Regression Models. jupyter notebook This opens a Jupyter notebook in the new browser window that opened. Browse to the notebooks folder. Click on the notebook to view the Notebook. Download, Install and Configure CyberDuck for View Logs in Monitor Depending on the version of Monitor it may use either the Database or Object Storage service store logs. To access the log files for custom functions in Cloud Object Storage. Install and configure Cyberduck to view logs. Connect to the Cloud Object Storage (COS) to download the custom function logs. You can access the credentials for accessing the service in Monitor under Services tab. Use tool called Cyberduck. Download free version from: Web: https://cyberduck.io/download/ Configure the setting in CyberDuck to connect to the Object Storage service included with Monitor. In Monitor, click on Services menu. Copy the settings for Object Storage as shown in the below into CyberDuck . Open CyberDuck and create a New Connection . Select Protocol is S3 Amazon URL Server is taken from Monitor Object Storage Service Cross Region Endpoints choose your region like US https://s3-api.us-geo.objectstorage.softlayer.net Copy Access Key ID for your Tenant ID Copy Secret Access Key for your Tenant ID Click Connect Button. Hit refresh and navigate to your Asset Type and date folder to see and download your log files. You will see Entity_Type_ID in the first few lines of the log files for that Asset Type . Bookmark the page for your Asset Type so that you can navigate here directly next time you want to access logs. Download, Install and Configure DBeaver Depending on the version of Monitor it may use either the Database or Object Storage service store logs. To access the log files for custom functions in Database, install and configure Dbeaver client to view logs in the database table. Connect to the Monitor Database Service to query database for custom function logs. You can get the database credentials for accessing the database service in Monitor under Services tab. Use a universal database client tool like Dbeaver to access the table. Download the free community edition from https://dbeaver.io/download/ Configure the setting in Dbeaver to connect to the Database service included with Monitor. In Monitor, click on Services menu. Copy the settings for Database and enter them as as shown in DBeaver . Open Dbeaver . Select a New Database Connection option from the Database menu. Select IBM DB2 and click on Next button. Enter the database settings from Monitor Database Service in DBeaver connection settings dialog. Click test Connection Button. Click OK Button to save the connection. Query Logs using DBeaver Depending on the version of Monitor it may use either the Database or Object Storage service store logs. To access the log files for custom functions in Database use the following queries with Dbeaver client to view logs. Open Dbeaver . Click a Monitor Database Connection for BLUDB schema. Select New SQL Script from the SQL Editor menu. Enter the the following query to get status of execution for all functions. SELECT E.NAME, K.ENTITY_TYPE_ID, K.STATUS, COUNT(*) AS Count FROM MAS82_MAM.KPI_LOGGING K, IOTANALYTICS.ENTITY_TYPE E WHERE K.ENTITY_TYPE_ID = E.ENTITY_TYPE_ID GROUP BY E.NAME ,K.ENTITY_TYPE_ID,K.STATUS ; Enter the the following query to delete old logs. DELETE FROM MAS82_MAM.KPI_LOGGING WHERE DATE(UPDATED_TS)!=CURRENT_DATE; Enter the the following query to purge successful runs. DELETE FROM MAS82_MAM.KPI_LOGGING WHERE STATUS='SUCCESS' AND ENTITY_TYPE_ID IN (13,14); Enter the the following query to get last 10 logs. SELECT E.NAME, K.ENTITY_TYPE_ID, K.STATUS, K.LOGFILE, K.LOG_MESSAGE, K.ERROR_MESSAGE, K.STARTED_TS FROM MAS82_MAM.KPI_LOGGING K, IOTANALYTICS.ENTITY_TYPE E WHERE K.ENTITY_TYPE_ID = E.ENTITY_TYPE_ID ORDER BY K.STARTED_TS DESC LIMIT 10; Download, Install and Configure PyCharm Using an integrated development environment helps improve developer productivity when writing Python scripts and Monitor Custom Functions. It is recommended that you download and install Pycharme Community Edition . It is a free IDE. To run Python Scripts in you should configure your Python Environment for each script you would like to run to reference the virtual environment you setup earlier. Follow the instructions to install Pycharm Community Edition. Start Pycharm. In the Project view, right click on the Python script file you want to run. Select edit configurations . See the example settings below. Set the Python Environment variable similar to what is shown below. It should reflect the installation directory of your virtual environment. PYTHONUNBUFFERED=1;DYLD_LIBRARY_PATH=/Users/student01/ve/iot-python3/lib/python3.7/site-packages/clidriver/lib:$DYLD_LIBRARY_PATH;PYTHONPATH=/Users/student01/MAS_AutoAI Set the Python interpreter to your virtual environment. Each time you run a Python script in Pyscharm remember to select the name of the virtual environment interpreter you created in PyCharm. Debug Functions Functions can be run locally and also run within the pipeline. You typically want to make sure your function works locally before you git commit your function and register your function with Monitor. To run your function locally run Python script ../scripts/local_test_of_function.py Git commit your function to a Github and they see if your data item for the calculated metric that calls your function runs. Functions that have a problem will cause an analysis error and cause the pipeline to stop for all other function on on the Device Type. You should resolve those issues quickly so that others aren't prevented from monitoring their own calculated metrics on the same Asset Type. If you see error message saying Analysis Stopped this means you have a pipeline processing error and that a custom function likely is causing it. It may also mean an input or output argument required by a calculated metric has been deleted or doesn't have a needed value. If your calculate metric runs but doesn't give the desired results see the log files for that Device Type. Download, Install and Configure CyberDuck for View Logs in Monitor","title":"1. Setup Local Environment"},{"location":"setup_local_environment/#setup-local-environment","text":"In this exercise you will setup your local development environment. Install and Create a Virtual Environment for Python v3.7.6 or later Setup and Activate a Virtual Environment Install Python dependencies, clone repository and verify environment Install and Launch Jupyter to work with Regression Models Download, Install and Configure CyberDuck for View Logs in Monitor Download, Install and Configure PyCharm Debug Functions !!! note These directions for are a Mac. Using Python v3.7.9 for Maximo Application Suite v8.5. Download Python for Windows at https://www.python.org/downloads/windows/","title":"Setup Local Environment"},{"location":"setup_local_environment/#install-and-create-a-virtual-environment","text":"Search for and download the right version of Python Launch Terminal Mac users need to install Brew Follow directions here: https://brew.sh/ Install the right Python Version v3.7.9 Mac users - In terminal: ``` brew install python ``` Window users Please see available public references for installing Python on Windows Install \"pip\". (Python Package Installer): sudo easy_install pip # for Mac try also removing sudo from the command Install virtual environment to keep dependencies separate from other projects ### For Mac sudo pip install virtualenv ### For Windows pip install virtualenv Create a virtual environment use Python 3.7.9 for Maximo Application Suite v8.3 python3 -m venv iot-python3","title":"Install and Create a Virtual Environment"},{"location":"setup_local_environment/#setup-and-activate-a-virtual-environment","text":"Open a new terminal window and change directory to your Virtual Environment directory. cd iot-python3 Activate your virtual environment.","title":"Setup and Activate a Virtual Environment"},{"location":"setup_local_environment/#for-mac","text":"source bin/activate","title":"For Mac"},{"location":"setup_local_environment/#for-windows","text":".\\Scripts\\activate The result in Terminal should be something like:","title":"For Windows"},{"location":"setup_local_environment/#for-mac_1","text":"(iot-python3) My-Mac: myuserid$ Install Git.","title":"For Mac"},{"location":"setup_local_environment/#for-windows_1","text":"See https://git-scm.com/download/win","title":"For Windows"},{"location":"setup_local_environment/#for-mac_2","text":"The easiest is to install the Xcode Command Line Tools. Install IOT Functions SDK See installing section instructions but for MAS v8.5.1 use this: ``` pip install git+git://github.com/ibm-watson-iot/functions@master --upgrade ``` Clone the your project github repository. git clone https://github.com/`your custom functions project` cd `your custom functions project` Within your project directory in the activated virtual environment, install Monitor Python Custom Functions SDK and dependencies. pip install -r requirements.txt Apply export variables in terminal for DYLD_LIBRARY_PATH for DB2 jars on Mac OS X only.","title":"For Mac"},{"location":"setup_local_environment/#for-mac_3","text":"cd `your custom functions project` export DYLD_LIBRARY_PATH=<\"replace with your virtual env directory>\"/lib/python3.7/site-packages/clidriver/lib:$DYLD_LIBRARY_PATH export DYLD_LIBRARY_PATH=/Users/carlosferreira/ve/iot-python3/lib/python3.7/site-packages/clidriver/lib:$DYLD_LIBRARY_PATH Prepend your project directory to the PYTHONPATH.","title":"For Mac"},{"location":"setup_local_environment/#for-mac_4","text":"export PYTHONPATH=<replace with your project dir>/your custom functions project:$PYTHONPATH If you are using Pycharm as your IDE you may also want to set your interpreter. Save credentials to your project root folder. If you are using Monitor SaaS, click on Services , click View Details of Watson IOT Analytics. Click on Copy and paste icon and copy the credentials into a file named beta-1_credentials.json file. Save the file in the project git cloned project directory name directory your custom functions project . If you are using Monitor in MAS, ask the instructor for your credentials_as.json file or create your own using the instructions in \"Establishing a Connection\" section of the Monitor documentation. Establishing a Connection Your credentials file should be structured in JSON as follows: ''' { \"tenantId\": \"yourtenant\", \"_db_schema\": \"your_dbSchema\", \"db2\": { \"username\": \"your_dbuser\", \"password\": \"your_dbpassword\", \"databaseName\": \"your_databaseName\", \"security\": \"SSL\", \"port\": 32551, \"httpsUrl\": \"https://cp4d-cpd-cp4d.yourdomainURL\", \"host\": \"yourdomainURL without HTTP prepended\" }, \"iotp\": { \"asHost\": \"yourtenant.api.monitor.your_dbSchema.yourlusterdomain:443\", \"apiKey\": \"vourAPIKey\", \"apiToken\": \"yourAPIToken\" } } ''' Save your credentials_as.json file to in the project root directory watson-classifier . Verify that you can get a local Python Script to run without errors. python ./scripts/local_test_of_function.py","title":"For Mac"},{"location":"setup_local_environment/#install-and-launch-jupyter","text":"Jupyter is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations and algorithms for working with AI Models and functions. Install Jupyter using instructions Use the Pip Install option. Start Jupyter Notebook process. Using a similar example steps below. cd /Users/student01/ve/iot-python3/bin source activate cd /Users/student01/MAS_AutoAI export PYTHONPATH=/Users/student01/MAS_AutoAI export DYLD_LIBRARY_PATH=/Users/student01/ve/iot-python3/lib/python3.7/site-packages/clidriver/lib:$DYLD_LIBRARY_PATH Launch Jupyter Notebook to edit Linear Regression Models. jupyter notebook This opens a Jupyter notebook in the new browser window that opened. Browse to the notebooks folder. Click on the notebook to view the Notebook.","title":"Install and Launch Jupyter"},{"location":"setup_local_environment/#download-install-and-configure-cyberduck-for-view-logs-in-monitor","text":"Depending on the version of Monitor it may use either the Database or Object Storage service store logs. To access the log files for custom functions in Cloud Object Storage. Install and configure Cyberduck to view logs. Connect to the Cloud Object Storage (COS) to download the custom function logs. You can access the credentials for accessing the service in Monitor under Services tab. Use tool called Cyberduck. Download free version from: Web: https://cyberduck.io/download/ Configure the setting in CyberDuck to connect to the Object Storage service included with Monitor. In Monitor, click on Services menu. Copy the settings for Object Storage as shown in the below into CyberDuck . Open CyberDuck and create a New Connection . Select Protocol is S3 Amazon URL Server is taken from Monitor Object Storage Service Cross Region Endpoints choose your region like US https://s3-api.us-geo.objectstorage.softlayer.net Copy Access Key ID for your Tenant ID Copy Secret Access Key for your Tenant ID Click Connect Button. Hit refresh and navigate to your Asset Type and date folder to see and download your log files. You will see Entity_Type_ID in the first few lines of the log files for that Asset Type . Bookmark the page for your Asset Type so that you can navigate here directly next time you want to access logs.","title":"Download, Install and Configure CyberDuck for View Logs in Monitor"},{"location":"setup_local_environment/#download-install-and-configure-dbeaver","text":"Depending on the version of Monitor it may use either the Database or Object Storage service store logs. To access the log files for custom functions in Database, install and configure Dbeaver client to view logs in the database table. Connect to the Monitor Database Service to query database for custom function logs. You can get the database credentials for accessing the database service in Monitor under Services tab. Use a universal database client tool like Dbeaver to access the table. Download the free community edition from https://dbeaver.io/download/ Configure the setting in Dbeaver to connect to the Database service included with Monitor. In Monitor, click on Services menu. Copy the settings for Database and enter them as as shown in DBeaver . Open Dbeaver . Select a New Database Connection option from the Database menu. Select IBM DB2 and click on Next button. Enter the database settings from Monitor Database Service in DBeaver connection settings dialog. Click test Connection Button. Click OK Button to save the connection.","title":"Download, Install and Configure DBeaver"},{"location":"setup_local_environment/#query-logs-using-dbeaver","text":"Depending on the version of Monitor it may use either the Database or Object Storage service store logs. To access the log files for custom functions in Database use the following queries with Dbeaver client to view logs. Open Dbeaver . Click a Monitor Database Connection for BLUDB schema. Select New SQL Script from the SQL Editor menu. Enter the the following query to get status of execution for all functions. SELECT E.NAME, K.ENTITY_TYPE_ID, K.STATUS, COUNT(*) AS Count FROM MAS82_MAM.KPI_LOGGING K, IOTANALYTICS.ENTITY_TYPE E WHERE K.ENTITY_TYPE_ID = E.ENTITY_TYPE_ID GROUP BY E.NAME ,K.ENTITY_TYPE_ID,K.STATUS ; Enter the the following query to delete old logs. DELETE FROM MAS82_MAM.KPI_LOGGING WHERE DATE(UPDATED_TS)!=CURRENT_DATE; Enter the the following query to purge successful runs. DELETE FROM MAS82_MAM.KPI_LOGGING WHERE STATUS='SUCCESS' AND ENTITY_TYPE_ID IN (13,14); Enter the the following query to get last 10 logs. SELECT E.NAME, K.ENTITY_TYPE_ID, K.STATUS, K.LOGFILE, K.LOG_MESSAGE, K.ERROR_MESSAGE, K.STARTED_TS FROM MAS82_MAM.KPI_LOGGING K, IOTANALYTICS.ENTITY_TYPE E WHERE K.ENTITY_TYPE_ID = E.ENTITY_TYPE_ID ORDER BY K.STARTED_TS DESC LIMIT 10;","title":"Query Logs using DBeaver"},{"location":"setup_local_environment/#download-install-and-configure-pycharm","text":"Using an integrated development environment helps improve developer productivity when writing Python scripts and Monitor Custom Functions. It is recommended that you download and install Pycharme Community Edition . It is a free IDE. To run Python Scripts in you should configure your Python Environment for each script you would like to run to reference the virtual environment you setup earlier. Follow the instructions to install Pycharm Community Edition. Start Pycharm. In the Project view, right click on the Python script file you want to run. Select edit configurations . See the example settings below. Set the Python Environment variable similar to what is shown below. It should reflect the installation directory of your virtual environment. PYTHONUNBUFFERED=1;DYLD_LIBRARY_PATH=/Users/student01/ve/iot-python3/lib/python3.7/site-packages/clidriver/lib:$DYLD_LIBRARY_PATH;PYTHONPATH=/Users/student01/MAS_AutoAI Set the Python interpreter to your virtual environment. Choose Pycharm , Preferences Search on interpreter , select Virtual Environment , select Existing Environment , Browse and select your Python Virtual Environment Each time you run a Python script in Pyscharm remember to select the name of the virtual environment inter","title":"Download, Install and Configure PyCharm"},{"location":"setup_local_environment/#setup-and-activate-a-virtual-environment_1","text":"Open a new terminal window and change directory to your Virtual Environment directory. cd iot-python3 Activate your virtual environment.","title":"Setup and Activate a Virtual Environment"},{"location":"setup_local_environment/#for-mac_5","text":"source bin/activate","title":"For Mac"},{"location":"setup_local_environment/#for-windows_2","text":".\\Scripts\\activate The result in Terminal should be something like:","title":"For Windows"},{"location":"setup_local_environment/#for-mac_6","text":"(iot-python3) My-Mac: myuserid$ Install Git.","title":"For Mac"},{"location":"setup_local_environment/#for-windows_3","text":"See https://git-scm.com/download/win","title":"For Windows"},{"location":"setup_local_environment/#for-mac_7","text":"The easiest is to install the Xcode Command Line Tools. Install IOT Functions SDK See instructions but for MAS v8.5.1 try this: ``` pip install git+git://github.com/ibm-watson-iot/functions@master --upgrade ``` Clone the your project github repository. git clone https://github.com/`your custom functions project` cd `your custom functions project` Within your project directory in the activated virtual environment, install Monitor Python Custom Functions SDK and dependencies. pip install -r requirements.txt Apply export variables in terminal for DYLD_LIBRARY_PATH for DB2 jars on Mac OS X only.","title":"For Mac"},{"location":"setup_local_environment/#for-mac_8","text":"cd `your custom functions project` export DYLD_LIBRARY_PATH=<\"replace with your virtual env directory>\"/lib/python3.7/site-packages/clidriver/lib:$DYLD_LIBRARY_PATH export DYLD_LIBRARY_PATH=/Users/carlosferreira/ve/iot-python3/lib/python3.7/site-packages/clidriver/lib:$DYLD_LIBRARY_PATH Prepend your project directory to the PYTHONPATH.","title":"For Mac"},{"location":"setup_local_environment/#for-mac_9","text":"export PYTHONPATH=<replace with your project dir>/your custom functions project:$PYTHONPATH If you are using Pycharm as your IDE you may also want to set Save credentials to your project root folder. If you are using Monitor SaaS, click on Services , click View Details of Watson IOT Analytics. Click on Copy and paste icon and copy the credentials into a file named beta-1_credentials.json file. Save the file in the project git cloned project directory name directory your custom functions project . If you are using Monitor in MAS, ask the instructor for your credentials_as.json file or create your own using the instructions in \"Establishing a Connection\" section of the Monitor documentation. Establishing a Connection Your credentials file should be structured in JSON as follows: ''' { \"tenantId\": \"yourtenant\", \"_db_schema\": \"your_dbSchema\", \"db2\": { \"username\": \"your_dbuser\", \"password\": \"your_dbpassword\", \"databaseName\": \"your_databaseName\", \"security\": \"SSL\", \"port\": 32551, \"httpsUrl\": \"https://cp4d-cpd-cp4d.yourdomainURL\", \"host\": \"yourdomainURL without HTTP prepended\" }, \"iotp\": { \"asHost\": \"yourtenant.api.monitor.your_dbSchema.yourlusterdomain:443\", \"apiKey\": \"vourAPIKey\", \"apiToken\": \"yourAPIToken\" } } ''' Save your credentials_as.json file to in the project root directory watson-classifier . Verify that you can get a local Python Script to run without errors. python ./scripts/local_test_of_function.py","title":"For Mac"},{"location":"setup_local_environment/#install-and-launch-jupyter_1","text":"Jupyter is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations and algorithms for working with AI Models and functions. Install Jupyter using instructions Use the Pip Install option. Start Jupyter Notebook process. Using a similar example steps below. cd /Users/student01/ve/iot-python3/bin source activate cd /Users/student01/MAS_AutoAI export PYTHONPATH=/Users/student01/MAS_AutoAI export DYLD_LIBRARY_PATH=/Users/student01/ve/iot-python3/lib/python3.7/site-packages/clidriver/lib:$DYLD_LIBRARY_PATH Launch Jupyter Notebook to edit Linear Regression Models. jupyter notebook This opens a Jupyter notebook in the new browser window that opened. Browse to the notebooks folder. Click on the notebook to view the Notebook.","title":"Install and Launch Jupyter"},{"location":"setup_local_environment/#download-install-and-configure-cyberduck-for-view-logs-in-monitor_1","text":"Depending on the version of Monitor it may use either the Database or Object Storage service store logs. To access the log files for custom functions in Cloud Object Storage. Install and configure Cyberduck to view logs. Connect to the Cloud Object Storage (COS) to download the custom function logs. You can access the credentials for accessing the service in Monitor under Services tab. Use tool called Cyberduck. Download free version from: Web: https://cyberduck.io/download/ Configure the setting in CyberDuck to connect to the Object Storage service included with Monitor. In Monitor, click on Services menu. Copy the settings for Object Storage as shown in the below into CyberDuck . Open CyberDuck and create a New Connection . Select Protocol is S3 Amazon URL Server is taken from Monitor Object Storage Service Cross Region Endpoints choose your region like US https://s3-api.us-geo.objectstorage.softlayer.net Copy Access Key ID for your Tenant ID Copy Secret Access Key for your Tenant ID Click Connect Button. Hit refresh and navigate to your Asset Type and date folder to see and download your log files. You will see Entity_Type_ID in the first few lines of the log files for that Asset Type . Bookmark the page for your Asset Type so that you can navigate here directly next time you want to access logs.","title":"Download, Install and Configure CyberDuck for View Logs in Monitor"},{"location":"setup_local_environment/#download-install-and-configure-dbeaver_1","text":"Depending on the version of Monitor it may use either the Database or Object Storage service store logs. To access the log files for custom functions in Database, install and configure Dbeaver client to view logs in the database table. Connect to the Monitor Database Service to query database for custom function logs. You can get the database credentials for accessing the database service in Monitor under Services tab. Use a universal database client tool like Dbeaver to access the table. Download the free community edition from https://dbeaver.io/download/ Configure the setting in Dbeaver to connect to the Database service included with Monitor. In Monitor, click on Services menu. Copy the settings for Database and enter them as as shown in DBeaver . Open Dbeaver . Select a New Database Connection option from the Database menu. Select IBM DB2 and click on Next button. Enter the database settings from Monitor Database Service in DBeaver connection settings dialog. Click test Connection Button. Click OK Button to save the connection.","title":"Download, Install and Configure DBeaver"},{"location":"setup_local_environment/#query-logs-using-dbeaver_1","text":"Depending on the version of Monitor it may use either the Database or Object Storage service store logs. To access the log files for custom functions in Database use the following queries with Dbeaver client to view logs. Open Dbeaver . Click a Monitor Database Connection for BLUDB schema. Select New SQL Script from the SQL Editor menu. Enter the the following query to get status of execution for all functions. SELECT E.NAME, K.ENTITY_TYPE_ID, K.STATUS, COUNT(*) AS Count FROM MAS82_MAM.KPI_LOGGING K, IOTANALYTICS.ENTITY_TYPE E WHERE K.ENTITY_TYPE_ID = E.ENTITY_TYPE_ID GROUP BY E.NAME ,K.ENTITY_TYPE_ID,K.STATUS ; Enter the the following query to delete old logs. DELETE FROM MAS82_MAM.KPI_LOGGING WHERE DATE(UPDATED_TS)!=CURRENT_DATE; Enter the the following query to purge successful runs. DELETE FROM MAS82_MAM.KPI_LOGGING WHERE STATUS='SUCCESS' AND ENTITY_TYPE_ID IN (13,14); Enter the the following query to get last 10 logs. SELECT E.NAME, K.ENTITY_TYPE_ID, K.STATUS, K.LOGFILE, K.LOG_MESSAGE, K.ERROR_MESSAGE, K.STARTED_TS FROM MAS82_MAM.KPI_LOGGING K, IOTANALYTICS.ENTITY_TYPE E WHERE K.ENTITY_TYPE_ID = E.ENTITY_TYPE_ID ORDER BY K.STARTED_TS DESC LIMIT 10;","title":"Query Logs using DBeaver"},{"location":"setup_local_environment/#download-install-and-configure-pycharm_1","text":"Using an integrated development environment helps improve developer productivity when writing Python scripts and Monitor Custom Functions. It is recommended that you download and install Pycharme Community Edition . It is a free IDE. To run Python Scripts in you should configure your Python Environment for each script you would like to run to reference the virtual environment you setup earlier. Follow the instructions to install Pycharm Community Edition. Start Pycharm. In the Project view, right click on the Python script file you want to run. Select edit configurations . See the example settings below. Set the Python Environment variable similar to what is shown below. It should reflect the installation directory of your virtual environment. PYTHONUNBUFFERED=1;DYLD_LIBRARY_PATH=/Users/student01/ve/iot-python3/lib/python3.7/site-packages/clidriver/lib:$DYLD_LIBRARY_PATH;PYTHONPATH=/Users/student01/MAS_AutoAI Set the Python interpreter to your virtual environment. Each time you run a Python script in Pyscharm remember to select the name of the virtual environment interpreter you created in PyCharm.","title":"Download, Install and Configure PyCharm"},{"location":"setup_local_environment/#debug-functions","text":"Functions can be run locally and also run within the pipeline. You typically want to make sure your function works locally before you git commit your function and register your function with Monitor. To run your function locally run Python script ../scripts/local_test_of_function.py Git commit your function to a Github and they see if your data item for the calculated metric that calls your function runs. Functions that have a problem will cause an analysis error and cause the pipeline to stop for all other function on on the Device Type. You should resolve those issues quickly so that others aren't prevented from monitoring their own calculated metrics on the same Asset Type. If you see error message saying Analysis Stopped this means you have a pipeline processing error and that a custom function likely is causing it. It may also mean an input or output argument required by a calculated metric has been deleted or doesn't have a needed value. If your calculate metric runs but doesn't give the desired results see the log files for that Device Type. Download, Install and Configure CyberDuck for View Logs in Monitor","title":"Debug Functions"}]}